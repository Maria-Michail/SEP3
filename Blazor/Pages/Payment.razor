@page "/payment"
@using Blazor.Data

@using System.Numerics
@using Blazor.Authorization
@using Database.Model
@using Model
@inject IOrderService OrderService
@inject IRecipeService RecipeService
@inject IIngredientsService IngredientsService
@inject NavigationManager NavigationManager
@attribute [Authorize]


<div class="row">
    <div class="col-lg-6 col-md-12 bg-light">

        <div class="jumbotron  paymentJumbotron">
            <EditForm class="col-12 p-4 editForm" Model="@bankInfo" OnValidSubmit="@HandleValidPayment" OnInvalidSubmit="@HandleInvalidPayment">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <div class="row">
                    <div class="form-group">
                        Card holder:<br/>
                        <InputText class="regInput" style="width:90%" @bind-Value="bankInfo.cardHolder"/>
                    </div>
                </div>

                <div class="row">
                    <div class="form-group">
                        Card Number:<br/>
                        <InputNumber class="regInput" style="width:90%" @bind-Value="bankInfo.cardNumber"/>
                    </div>
                </div>

                <div class="row">
                    <div class="col-xl-6 col-lg-12">
                        <div class="form-group">
                            Expiry Date:<br/>
                            <InputDate class="regInput paymentInputSmall" @bind-Value="expiryDate"/>
                        </div>
                    </div>
                    <div class="col-xl-6 col-lg-12">
                        <div class="form-group">
                            CVV:<br/>
                            <InputNumber class="regInput paymentInputSmall" @bind-Value="cvv"/>
                        </div>
                    </div>
                </div>
                <div class="row m-3">
                    <div class="row d-flex justify-content-center">
                        <div class="col-12 center-block">
                            <p class="actions ">
                                <button class="btn btn-primary order-button" type="submit" @onclick="@(() => NavigateToComponent())">Pay Now</button>
                            </p>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>

    </div>
    <div class="col-lg-6 col-md-12 bg-light">
        <div class="jumbotron paymentJumbotron">
            <div class="row m-3">
                <h3 class="text-center text-secondary">Your order:</h3>
            </div>
            <div class="row m-3">
                <h1 class="display-4">@Recipe.recipeName</h1>
            </div>
            <div class="row m-3">
                <div class="col-6">
                    <p class="text-secondary">Shipping</p>
                </div>
                <div class="col-6">
                    <p class="text-secondary">Free</p>
                </div>
            </div>
            <div class="row m-3">
                <div class="col-6">
                    <p class="text-secondary">Total</p>
                </div>
                <div class="col-6">
                    <p class="text-secondary">@orderPrice DKK</p>
                </div>
            </div>
        </div>
    </div>
</div>
@code {


    private DateTime expiryDate;
    private int cvv;
    
    //Change those two
    private int orderId = 0;
    private double orderPrice = 0;

    private string errorMessage;

    private BankInfo bankInfo = new BankInfo();
    private Order newOrder = new Order();
    public Recipe Recipe;
    public Account currentUser;
    private IList<OrderedShopIngredients> newShopIngredients = new List<OrderedShopIngredients>();
    private IList<OrderedShopIngredients> newShopIngredientsWithoutUnchecked = new List<OrderedShopIngredients>();
    protected override async Task OnInitializedAsync()
    {
        //bankInfo = CustomAuthenticationStateProvider.getUser().bankInfo;
        Recipe = RecipeService.recipe;
        currentUser = CustomAuthenticationStateProvider.getUser();
        newShopIngredients = IngredientsService.OrderedShopIngredients;
        //filter to get only the checked ingredients
        for (int i=0; i<newShopIngredients.Count ;i++)
        {
            if (newShopIngredients[i].uncheck == true)
            {
                newShopIngredientsWithoutUnchecked.Add(newShopIngredients[i]);
            }
        }
        //end of filtering
        foreach (var order in newShopIngredientsWithoutUnchecked)
        {
            orderPrice = orderPrice + order.totalPrice;
        }
        
    }
    
    public async Task HandleValidPayment()
    {
        errorMessage = "";
        try
        {
            newOrder.orderId = orderId;
            newOrder.dateTime = DateTime.Now;
            newOrder.orderPrice = orderPrice;
            newOrder.recipeId = Recipe.recipeId;
            newOrder.username = currentUser.username;
            newOrder.OrderedShopIngredients = newShopIngredientsWithoutUnchecked;
            Console.WriteLine("Trying paying");
            if (cvv >= 100 && cvv <= 999)
            {
                Console.WriteLine("cvv fine");
                if (expiryDate > DateTime.Now)
                {
                    Console.WriteLine("expiry date fine");
                    await OrderService.storeOrder(newOrder);
                    NavigationManager.NavigateTo("/orders");
                }
            }
        }
        catch (Exception e)
        {
            Console.WriteLine("Payment failed");
            errorMessage = e.Message;
        }
    }

    public async Task HandleInvalidPayment()
    {
        Console.WriteLine("Invalid");
    }
    
    private void NavigateToComponent()
    {
        NavigationManager.NavigateTo("/successfulOrder");
    }
}