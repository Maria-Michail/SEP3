@page "/payment"
@using Blazor.Data

@using System.Numerics
@using Blazor.Authorization
@using Database.Model
@using Model
@inject IOrderService OrderService
@inject IRecipeService RecipeService
@inject IIngredientsService IngredientsService
@inject NavigationManager NavigationManager
@attribute [Authorize]




<!--
<div class="row">
<EditForm class="regForm col-7 bg-white" Model="@bankInfo" OnValidSubmit="@HandleValidPayment" OnInvalidSubmit="@HandleInvalidPayment">
    <div class="p-2 m-2">
        <h2 class="title">Payment</h2>
        <div class="p-2 m-2">
            <div class="row ">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                    
                <div class="col-11 bg-white">
                    <ul class="orderPageList" data-role="listview" style="list-style-type: none">
                        <li>
                            <div class="form-group">
                                Card holder:<br/>
                                <InputText class="regInput" style="width:90%" @bind-Value="bankInfo.cardHolder"/>
                            </div>
                        </li>
                        <li>
                            <div class="form-group">
                                Card Number:<br/>
                                <InputNumber class="regInput" style="width:90%" @bind-Value="bankInfo.cardNumber"/>
                            </div>
                        </li>
                        <div class="row">
                            <div class="col-6">
                                <li>
                                    <div class="form-group">
                                        Expiry Date:<br/>
                                        <InputDate class="regInput" style="width:80%" @bind-Value="expiryDate"/>
                                    </div>
                                </li>
                            </div>
                            <div class="col-6">
                                <li>
                                    <div class="form-group">
                                        CVV:<br/>
                                        <InputNumber class="regInput" style="width:80%" @bind-Value="cvv"/>
                                    </div>
                                </li>
                            </div>
                        </div>
                        <div class="row d-flex justify-content-center">
                            <p class="actions ">
                                <button class="btn btn-primary order-button" type="submit">Pay Now</button>
                            </p>
                        </div>
                    </ul>
                </div>
                <div class="col-1 bg-white">
                            
                </div>
            </div>
        </div>
    </div>
</EditForm>-->

<div class="row m-5">
    <div class="col-lg-6 col-md-12 bg-white">
        <div class="jumbotron">
            <EditForm class="regForm col-12 bg-white p-4" Model="@bankInfo" OnValidSubmit="@HandleValidPayment" OnInvalidSubmit="@HandleInvalidPayment">
                <div class="row">
                    <div class="form-group">
                        Card holder:<br/>
                        <InputText class="regInput" style="width:90%" @bind-Value="bankInfo.cardHolder"/>
                    </div>
                </div>

                <div class="row">
                    <div class="form-group">
                        Card Number:<br/>
                        <InputNumber class="regInput" style="width:90%" @bind-Value="bankInfo.cardNumber"/>
                    </div>
                </div>

                <div class="row">
                    <div class="col-xl-6 col-lg-12">
                        <div class="form-group">
                            Expiry Date:<br/>
                            <InputDate class="regInput paymentInputSmall" @bind-Value="expiryDate"/>
                        </div>
                    </div>
                    <div class="col-xl-6 col-lg-12">
                        <div class="form-group">
                            CVV:<br/>
                            <InputNumber class="regInput paymentInputSmall" @bind-Value="cvv"/>
                        </div>
                    </div>
                </div>
                <div class="row m-3">
                    <div class="row d-flex justify-content-center">
                        <div class="col-12 center-block">
                            <p class="actions ">
                                <button class="btn btn-primary order-button" type="submit">Pay Now</button>
                            </p>
                        </div>
                    </div>
                    </div>
            </EditForm>
            </div>
    </div>
    <div class="col-lg-6 col-md-12 bg-light p-4">
        <div class="row m-3">
            <h3 class="text-center text-secondary">Your order:</h3>
        </div>
        <div class="row m-3">
            <h1 class="display-4">@Recipe.recipeName</h1>
        </div>
        <div class="row m-3">
            <div class="col-6">
                <p class="text-secondary">Shipping</p>
            </div>
            <div class="col-6">
                <p class="text-secondary">Free</p>
            </div>
        </div>
        <div class="row m-3">
            <div class="col-6">
                <p class="text-secondary">Total</p>
            </div>
            <div class="col-6">
                <p class="text-secondary">@orderPrice DKK</p>
            </div>
        </div>
    </div>
</div>

<!--
<div class="col-5 bg-light">
    <div class="p-2 m-3">
        <h3 class="text-center text-secondary">Order</h3>
    </div>
    <div class="row">
        <div class="col-2">
        </div>
        <div class="col-8">
            <div class="row">
                <div class="col-8">
                    <h1 class="display-4">@Recipe.recipeName</h1>
                </div>
                <div class="col-4">
                    <p>$ 400</p>
                </div>
            </div>
            <div class="row" style="margin-top: 100px">
                <div class="col-8">
                    <p class="text-secondary">Shipping</p>
                </div>
                <div class="col-4">
                    <p class="text-secondary">Free</p>
                </div>
            </div>
            <hr/>
            <div class="row">
                <div class="col-8">
                    <p class="text-secondary">TOTAL</p>
                </div>
                <div class="col-4">
                    <p class="text-secondary">$400</p>
                </div>
            </div>
        </div>
        <div class="col-2">
        </div>
    </div>
</div>
</div>
-->

@code {


    private DateTime expiryDate;
    private int cvv;
    
    //Change those two
    private int orderId = 0;
    private double orderPrice = 0;

    private string errorMessage;

    private BankInfo bankInfo = new BankInfo();
    private Order newOrder = new Order();
    public Recipe Recipe;
    public Account currentUser;
    private IList<OrderedShopIngredients> newShopIngredients = new List<OrderedShopIngredients>();
    private IList<OrderedShopIngredients> newShopIngredientsWithoutUnchecked = new List<OrderedShopIngredients>();
    protected override async Task OnInitializedAsync()
    {
        //bankInfo = CustomAuthenticationStateProvider.getUser().bankInfo;
        Recipe = RecipeService.recipe;
        currentUser = CustomAuthenticationStateProvider.getUser();
        newShopIngredients = IngredientsService.OrderedShopIngredients;
        //filter to get only the checked ingredients
        for (int i=0; i<newShopIngredients.Count ;i++)
        {
            if (newShopIngredients[i].uncheck == true)
            {
                newShopIngredientsWithoutUnchecked.Add(newShopIngredients[i]);
            }
        }
        //end of filtering
        foreach (var order in newShopIngredientsWithoutUnchecked)
        {
            orderPrice = orderPrice + order.totalPrice;
        }
        
    }
    
    public async Task HandleValidPayment()
    {
        errorMessage = "";
        try
        {
            newOrder.orderId = orderId;
            newOrder.dateTime = DateTime.Now;
            newOrder.orderPrice = orderPrice;
            newOrder.recipeId = Recipe.recipeId;
            newOrder.username = currentUser.username;
            newOrder.OrderedShopIngredients = newShopIngredientsWithoutUnchecked;
            Console.WriteLine("Trying paying");
            await OrderService.storeOrder(newOrder);
            NavigationManager.NavigateTo("/");
        }
        catch (Exception e)
        {
            Console.WriteLine("Payment failed");
            errorMessage = e.Message;
        }
    }

    public async Task HandleInvalidPayment()
    {
        Console.WriteLine("Invalid");
    }
}