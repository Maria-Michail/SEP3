@page "/login"
@using Blazor.Authorization
@namespace LoginComponent

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
<AuthorizeView>
    <NotAuthorized>
        <div class="form-group m-2">
            <input class="form-control" placeholder="Username" aria-label="Username" aria-describedby="basic-addon1" @bind-value="username"/>
        </div>
        <div class="form-group m-2">
           <input class="form-control" type="password" placeholder="Password" aria-label="Password" aria-describedby="basic-addon1" @bind-value="password"/>
        </div>
        <div style="color:red">@errorMessage</div> 
        <button type="button" class="btn btn-light"><a href="" @onclick="PerformLogin">Login</a></button>
    </NotAuthorized>
    <Authorized>
        <button type="button" class="btn btn-light"><a href="" @onclick="PerformLogout">Log out</a></button>
        

    </Authorized>
</AuthorizeView>

@code {
    private string username;
    private string password;
    private string errorMessage;

    public async Task PerformLogin()
    {
        errorMessage = "";
        try
        {
            Console.WriteLine("Trying login");
            await ((CustomAuthenticationStateProvider) AuthenticationStateProvider).ValidateLogin(username, password);
            username = "";
            password = "";
            NavigationManager.NavigateTo("/");
        }
        catch (Exception e)
        {
            Console.WriteLine("login failed");
            errorMessage = e.Message;
        }
    }

    public async Task PerformLogout()
    {
        errorMessage = "";
        username = "";
        password = "";
        try
        {
            await ((CustomAuthenticationStateProvider) AuthenticationStateProvider).Logout();
            NavigationManager.NavigateTo("/");
        }
        catch (Exception e)
        {
        }
    }

}