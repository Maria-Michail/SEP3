@page "/login"
@using Blazor.Authorization
@namespace LoginComponent

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
<AuthorizeView>
    <NotAuthorized>
        <div class="loginStripe">

            <input class="form-control login" placeholder="Username" aria-label="Username" aria-describedby="basic-addon1" @bind-value="username"/>
            <input class="form-control login" type="password" placeholder="Password" aria-label="Password" aria-describedby="basic-addon1" @bind-value="password"/>

            <div style="color:red">@errorMessage</div>
            <button type="button" class="btn btn-light login">
                <a href="" @onclick="PerformLogin">Login</a>
            </button>
        </div>

    </NotAuthorized>
    <Authorized>
        <div class="loginStripe">
            <button type="button" class="btn btn-light">
                <a href="" @onclick="PerformLogout">Log out</a>
            </button>
        </div>


    </Authorized>
</AuthorizeView>

@code {
    private string username;
    private string password;
    private string errorMessage;

    public async Task PerformLogin()
    {
        errorMessage = "";
        try
        {
            Console.WriteLine("Trying login");
            await ((CustomAuthenticationStateProvider) AuthenticationStateProvider).ValidateLogin(username, password);
            username = "";
            password = "";
            NavigationManager.NavigateTo("/home");
        }
        catch (Exception e)
        {
            Console.WriteLine("login failed");
            errorMessage = e.Message;
        }
    }

    public async Task PerformLogout()
    {
        errorMessage = "";
        username = "";
        password = "";
        try
        {
            await ((CustomAuthenticationStateProvider) AuthenticationStateProvider).Logout();
            NavigationManager.NavigateTo("/home");
        }
        catch (Exception e)
        {
        }
    }

}