@page "/register"
@using Blazor.Data
@using System.Numerics
@using Database.Model
@inject IAccountService AccountService
@inject NavigationManager NavigationManager


<EditForm Model="@newAccount" OnValidSubmit="@HandleValidRegister" OnInvalidSubmit="@HandleInvalidRegister">
    
        
            <DataAnnotationsValidator/>
            <ValidationSummary/>

            <!--User information section -->
            <h3 class="sectionHeader">Account information</h3>
            
            <div class="form-group mx-5">
                <label>Username:</label>
                <InputText class="form-control" placeholder="Username" aria-label="Username" aria-describedby="basic-addon1" @bind-Value="newAccount.username"/>
            </div>
            <div class="form-group mx-5">
                <label>Password:</label>
                <InputText class="form-control" placeholder="password" aria-label="password" aria-describedby="basic-addon1" @bind-Value="newAccount.password"/>
                <small id="emailHelp" class="form-text text-muted">Your password should contain both small and capital letters and at least two digits.</small>
            </div>
            <div class="form-group mx-5">
                <label>Email:</label>
                <InputText class="form-control" placeholder="Email" aria-label="Email" aria-describedby="basic-addon1" @bind-Value="newAccount.email"/>
                <small id="emailHelp" class="form-text text-muted">We'll never share your email with anyone else.</small>
            </div>


            <!--Delivery information section -->

            <h3 class="sectionHeader">Address information</h3>

                <div class="form-group mx-5">
                    <label>Street:</label>
                    <InputText class="form-control" placeholder="Street" aria-label="street" aria-describedby="basic-addon1" @bind-Value="newAddress.street"/>
                </div>
            <div class="form-group mx-5">
                    <label>City:</label>
                    <InputText class="form-control" placeholder="City" aria-label="City" aria-describedby="basic-addon1" @bind-Value="newAddress.city"/>
                </div>
                <div class="form-group mx-5">
                    <label>Zip code:</label>
                    <InputNumber class="form-control" placeholder="Zip code" aria-label="Zip code" aria-describedby="basic-addon1" @bind-Value="newAddress.zipCode"/>
                </div>


            <!--Bank information section -->
            <h3 class="sectionHeader">Payment information</h3>
            <div class="form-group mx-5">
                    <p>Card Holder:</p>
                    <InputText class="form-control" placeholder="Card holder" aria-label="Card holder" aria-describedby="basic-addon1" @bind-Value="newBankInfo.cardHolder"/>
                </div>
                <div class="form-group mx-5">
                    <p>Card Number:</p>
                    <InputNumber class="form-control" placeholder="Card number" aria-label="Card number" aria-describedby="basic-addon1" @bind-Value="newBankInfo.cardNumber"/>
                </div>



            
            <p class="actions ">
                <button class="btn btn-primary registerBtn" type="submit" @onclick="@(() => NavigateToComponent())">Register</button>
            </p>
       
    
</EditForm>

@code {

    private string username;
    private string password;
    private string email;
    private string street;
    private string streetNumber;
    private string city;
    private int zipCode;
    private long cardNumber;

    private string errorMessage;

    private Account newAccount = new Account();
    private Address newAddress = new Address();
    private BankInfo newBankInfo = new BankInfo();

    public async Task HandleValidRegister()
    {
        errorMessage = "";
        try
        {
            Console.WriteLine("Trying register");
            await AccountService.Register(newAccount, newAddress, newBankInfo);
        }
        catch (Exception e)
        {
            Console.WriteLine("Register failed");
            errorMessage = e.Message;
        }
    }

    public async Task HandleInvalidRegister()
    {
        Console.WriteLine("Invalid");
    }

    protected override async Task OnInitializedAsync()
    {
    }
    
    private void NavigateToComponent()
    {
        NavigationManager.NavigateTo("/home");
    }

}