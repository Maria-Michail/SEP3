@page "/viewRecipes"
@using Model
@using Blazor.Data
@inject IRecipeService RecipeService
@inject NavigationManager NavigationManager
@attribute [Authorize]

<h2 class="title">ViewRecipes</h2>
<p>
    Filter by Category: <input type="text" @oninput="@((arg)=>FilterByCategory(arg))" style="width:150px"/>
</p>

@if (RecipesToShow == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!RecipesToShow.Any())
{
    <p>
        <em>No recipes exist. Please add some.</em>
    </p>
}
else
{
    <div class="row">
        @foreach (var recipe in RecipesToShow)
                {
                    <div class="col-12">
                        <div class="card" style="width: 100%;">
                            <div class="row">
                                <div class="col-3">
                                    <img src="../Images/@recipe.imageName" class="card-img-top" alt="@recipe.recipeName">
                                </div>
                                <div class="col-9">
                                    <div class="card-body">
                                        <h5 class="card-title" style="text-decoration: underline">@recipe.recipeName</h5>
                                        <p class="card-text">@recipe.description</p>
                                        <button class="btn btn-primary" @onclick="@(() => NavigateToComponent(recipe))">Check the recipe now!</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
    </div>
}



@code {
    public IList<Recipe> Recipes { get; set; }
    public IList<Recipe> RecipesToShow;
    
    
    private void FilterByCategory(ChangeEventArgs changeEventArgs){
        string? filterByCat = null;
        try
        {
            filterByCat = changeEventArgs.Value.ToString();
        } catch(Exception e){}
        if (!String.IsNullOrEmpty(filterByCat))
        {    
            RecipesToShow = Recipes.Where(r => r.category.categoryName.Equals(filterByCat)).ToList();
        }
        else
        {
            RecipesToShow = Recipes;
        }
    }

    
    protected override async Task OnInitializedAsync()
    {
        Recipes = await RecipeService.GetRecipesAsync();
        RecipesToShow = Recipes;
        base.OnInitialized();
    }

    private void NavigateToComponent(Recipe p) {
      NavigationManager.NavigateTo("recipeView/" + p.recipeId);
    }
}